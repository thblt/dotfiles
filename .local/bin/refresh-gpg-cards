#!/bin/sh

# This script helps the gpg-ssh-agent and git work correctly with
# multiple sign and encryption subkeys stored on multiple smartcards.
# It reads the smartcard status and (re)creates ~/.gnupg/sshcontrol
# and ~/.config/git/signingkey with the keygrip of an A and U subkey,
# respectively, present on a connected smartcard.
#
# This can probably be called from an udev rule, at each smartcard
# insertion/deletion.  It should fail cleanly if no card is connected.
#
# Notice that git doesn't read ~/.config/git/signingkey, it needs to
# be Includeâ€™d from the main config, like this
# [Include]
# path = "~/.config/git/signingkey"
#
# Limitations:
#  - Only works with a single smartcard.  This is a hard limitation in
#    git where you can only provide a single user.signingkey, but
#    there could be multiple keygrips in sshcontrol.  Supporting
#    multiple smartcards may also allow to prefer unlocked
#    smartcards/subkeys.
#
#  - It calls gpg with the default output format instead of properly
#    parsable ` --with-colons --status-fd=v2`

set -e
export LANG=C

# Read key fingerprints
# The fpr field contains the three fingerprints, in (some) order.
fingerprints=$(gpg --card-status --with-colons | grep "^fpr:")
key_s=$(echo $fingerprints | cut -d: -f2)
key_a=$(echo $fingerprints | cut -d: -f3)
echo "Signature key: $key_s"
echo "Auth key:      $key_a"

# Update gitconfig
echo "[user]" > ~/.config/git/signingkey
echo "  signingkey = 0x$key_s!" >> ~/.config/git/signingkey

# Update sshcontrol

# @FIXME: this assumes, optimistically, that the fingerprint
# will always come *before* the keygrip --- which probably isn't
# guaranteed.
gpg -K --with-subkey-fingerprint --with-keygrip --with-colons \
    | grep -A 100 "^fpr:.*:$key_a" \
    | grep "^grp:" \
    | head -n 1 \
    | cut -d: -f 10 \
          > ~/.gnupg/sshcontrol
